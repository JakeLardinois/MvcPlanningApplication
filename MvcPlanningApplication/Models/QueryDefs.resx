<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeleteAllHaworthOrderCharacteristics" xml:space="preserve">
    <value>DELETE
  FROM HaworthOrderCharacteristics</value>
  </data>
  <data name="DeleteAllHaworthOrders" xml:space="preserve">
    <value>DELETE
FROM HaworthOrders</value>
  </data>
  <data name="DeleteAllHaworthSupplierDemands" xml:space="preserve">
    <value>DELETE
FROM HaworthSupplierDemands</value>
  </data>
  <data name="ReSeedTable" xml:space="preserve">
    <value>DBCC CHECKIDENT (~p0, RESEED, 0)</value>
  </data>
  <data name="SelectCOItemByCustNumListAndStatus" xml:space="preserve">
    <value>SELECT coitem.co_num, 
	coitem.co_line, 
	coitem.co_release, 
	coitem.item, 
	coitem.qty_ordered, 
	coitem.due_date, 
	coitem.promise_date, 
	coitem.ref_num, 
	coitem.ref_line_suf, 
	co.cust_po,
	ISNULL(job.qty_complete,0) AS qty_complete
FROM coitem
	LEFT JOIN co ON coitem.co_num = co.co_num
	LEFT JOIN job ON job.job = coitem.ref_num AND job.suffix = coitem.ref_line_suf
WHERE coitem.co_cust_num IN (~p0) AND coitem.stat = '~p1'</value>
  </data>
  <data name="SelectCustomerOrdersByPO" xml:space="preserve">
    <value>SELECT co.co_num, coitem.co_line, coitem.co_release, coitem.item, coitem.qty_ordered, coitem.promise_date, coitem.co_release, coitem.due_date, co.cust_po
  FROM co
	INNER JOIN coitem ON co.co_num = coitem.co_num
  WHERE co.cust_po IN (~p0) AND coitem.stat IN ('O', 'F', 'C')
  ORDER BY co_num ASC</value>
  </data>
  <data name="SpJobPickListByJobAndSuffix" xml:space="preserve">
    <value>EXEC WTF_App.[dbo].[Rpt_JobPickListSp] @Job = '~p0',
		@Suffix = '~p1',
		@Item = NULL,
		@Whse = 'MAIN',
		@StartingOperNum = NULL,
		@EndingOperNum = NULL,
		@SortByLoc = 0,
		@IncludeSerialNumbers = 1,
		@ReprintPickListItems = 1,
		@PostMaterialIssues = 0,
		@PageBetweenOperations = 0,
		@PrintSecondaryLocations = 1,
		@ExtendByScrapFactor = 0,
		@PrintBarCode = 0,
		@DisplayHeader = 1,
		@PMessageLanguage = 1033</value>
    <comment>I used the command "GRANT EXECUTE ON [WTF_App].[dbo].[Rpt_JobPickListSp] TO WTFApp" to grant the execute priveleges required for the stored procedure Rpt_JobPickListSp
"REVOKE EXECUTE ON [WTF_App].[dbo].[Rpt_JobPickListSp] TO WTFApp" is the SQL to remove the privelege.</comment>
  </data>
</root>